#!/bin/bash

#
# Author: Benno K.
# Email: benno@xyz.de
# Github: https://www.github.com/Benno-K
	Version=1.0-005
# 
# This script is available for
# public use under GPL V3 (see
# file LICENSE)
#
# Credits:
# This script was heavily inspired by
# https://gist.github.com/wadedugas/69e385bd1c8d27f0a1a885455361022b
# (which is a fork of
# https://gist.github.com/BigNerd/b3d79fd1b40b5667a5663eaa5fa9e80f)
# which taught me, how to effectly access the log of
# the fritzbox and how to do this in bash
# I had never heard of data.lua and found it being
# much more efficient than all what I've tried
# before. Also I did not know "jd" which makes it
# pretty easy to handle JSON data in a shell script.
# If someone finds a documentation for data.lua
# i would be eager to get it
#
# Defaults
loghome=~/fblogs
boxname=fritz.box
logfilnam=fblog

# Filter function to either only deliver new or 
# deliver all events
filter () {
	local sedpattern="${1}"
	# if logfile exists
	if [ -s "${logofyear}" ]; then
		# only deliver new events (all lines after
		# the pattern matches)
		sed -n -E "/${sedpattern}/,\$p" |sed -e 1d
	else
		# deliver all events
		cat
	fi
}

# Exit function
ciao () {
	local sts=$1
	shift
	if [ $sts != 0 ]; then
		echo >&2 "$@"
	else
		echo "$@"
	fi
	exit $sts
}

# Display help function
usage () {
  cat <<EOI
Usage: (Version: $Version)
  $bn [option[,option...]]
  -b --box <hostname or IP of FRITZ!Box>
  -c --creds <storefile> containg the credentials
          by default ~/.${bn}.data is checked
          overrides -u
  -C --save-credentials [<storefile>]
          store credentials in file
          can be used together with -c
          default storefile is ~/.${bn}.data
          storing passwords in a file is potentially
          unsafe!
  -d --dir <directory-to-hold-logfiles>
  -D --do-not-filter
          do not filter logins of the user used
          to log in this script
  -h --help (shows this text)
  -n --name <file-basename> (of logfile, default:fblog)
  -p --pass <name> can be
          a) environment variable
          b) a named pipe 
          c) an executable file
          that holds or delivers the password
          of the FRITZ!Box user
  -u --user <username> (of FRITZ!Box-user)
	-v --version  report own version number
EOI
}

# Check for things we depend on (md5/md5sum is checked
# elsewhere in here)
utils="awk base64 curl iconv jq printf sed rev"
utilsmissing=0
for util in $utils
do
	if ! which >/dev/null 2>&1 $util ; then
		echo "Utility $util is not available" >&2
		((utilsmissing++))
	fi
done
if [ $utilsmissing -gt 0 ];then
	cat <<-EOI
	This script relies on the utilities
	$utils
	but at least one of it is unavailable.
	Until you make them available I unfortunately
	have to quit.
	EOI
	exit 1
fi

bn=$(basename $0)
# Parse arguments
while [ "${1:0:1}" = "-" ]
do
	case "$1" in
		-v|--version)
			echo $Version
			exit
			;;
		-D|--do-not-filter)
			ignore="SomeTextThatWillHopefullyNeverAppearInAnEvent"
			;;
		-b|--box)
			shift
			boxname=$1
			;;
		-u|--user)
			shift
			user=$1
			;;
		-C|--save-credentials)
			onlysavecred=1
			;;
		-c|--creds)
			shift
			credfil="${1}"
			;;
		-d|--dir)
			shift
			loghome="${1}"
			;;
		-p|--pass)
			popt=${1} # needed for error msg
			shift
			cand=${1}
			# assume it is a variable
			eval $(echo pass=\$${cand})
			# was it?
			if [[ -z "${pass}" || "${pass:0:1}" = '$' ]]; then
				# nope, is it a pipe?
				if [[ -p "${cand}" ]]; then
					# yes, so read one line
					read -r pass < "${cand}"
				# no pipe, is it an executable file
				elif [[ -x "${cand}" ]]; then
					# yes, then execute it
					pass=$(${cand})	
					# pass=$("./xyz")	
				else
					# no var, no pipe, no exec - give up
					echo >&2 "you cannot specify passwords with $popt"
					ciao 5 "${cand} is not a variable, pipe, executable"
				fi
			fi
			;;
		# Hidden/undocumented option to increase
		# the minor version number of/within this
		# script. It does not make sense for anybody
		# but me to use this.
		-iv|-nv)
			# unneeded as $Version is defined
			# eval $(grep Version=1.0-010
			minor="${Version/*-/}"
			major=${Version/-*/}
			# the following do-loop is a work-around
			# for the following statement that should 
			# remove any leading zeroes
			# minor="${minor##+(0)}"
			# that works in interactive bash
			# but not in this script (with minor being 008)
			while [ ${minor:0:1} = 0 ]
			do
				minor=${minor:1}
			done
			((minor++))
			newver=$(printf "%s-%03d" $major $minor)
			sed -i=.backup "1,8 s/\tVersion=.*$/\tVersion=${newver}/" $0
			echo "$bn V$newver"
			exit 0
			;;
		-h|--help)
			usage
			exit 0
			;;
		*)
			ciao 2 "unrecognized option: $1 - try ${bn} -h"
			;;
	esac
	shift
done
[ $# != 0 ] && ciao 1 "don't want parameter(s): $@ - try ${bn} -h"

# You are not intended to change these
baseurl="http://${boxname}"
timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
logofyear=$loghome/${logfilnam}-$(date +%Y).log
loylastline="let grep/sed fail to find this"

# The selected Fritz!Box user needs the permissions to 
# view/edit the configuration.

# The username and password are not set in this
# script by default
# This script prompts you for them.
#
# To store "hidden" (but still NOT ENCRYPTED=UNSAFE!)
# credentials use -C or the following command
# echo -n "fritz-username fritz-password" | rev | base64 | rev > ${credfil}
# where credfil is ~/.updfblog.data as long as this
# script is named updfblog. If you change it's name
# it searches for a credentials file according to
# tha name.
# This method might be a bit safer as storing cleartext

# You may specify hardcoded username and password
# here using
# 	user=fritzbox-account-username
# and
# 	pass=fritzbox-account-password
# below, but hardcoding credentials is highly
# discouraged and unsafe!
# Clear $user (if not set by -u) and $pass
user=${user:-}
pass=

# Now determine the credentials
if [[ -z "${user}" || -z "${pass}" ]];then
	credfil=${credfil:-~/.$(basename $0).data}
	if [[ ! -f "${credfil}" || ! -z "$user" ]];then
		# No credentials file was found, prompt for username and password 
		echo "Need credentials to log into $baseurl"
		if [[ -z "${user}" ]];then
			read -p "Username: " user
			if [ -z "${user}" ]; then
				echo "You did not enter a username, exiting"
				exit 1
			fi
		fi
		read -p "Password for ${user}: " -s pass
		echo ""
		if [ -z "${pass}" ]; then
		 echo "You did not enter a password, exiting"
		 exit 1
		fi
	else
		eval $( rev ${credfil} | base64 -d | rev | awk '{printf "user=%s;pass=%s",$1,$2}')
	fi
fi
# Now we have the credentials

# Messages like this will be filtered out (unless -D)
ignore=${ignore:-"Anmeldung des Benutzers ${user} an der FRITZ\!Box-BenutzeroberflÃ¤che"}

# if -C, then we should have user and password by now
# so store it and exit
if [ "${onlysavecred}" = 1 ]; then
	echo -n "${user} ${pass}" | rev | base64 | rev > ${credfil}
	exit 0
fi

# make sure $? reflects pipe command failures
# and exit on errors
set -e -o pipefail

# get current session id and challenge
resp=$(curl -s "$baseurl/login_sid.lua")

if [[ "$resp" =~ \<SID\>(0+)\</SID\> ]] ; then
  # SID=0 => not logged in
  if [[ "$resp" =~ \<BlockTime\>([0-9a-fA-F]+)\</BlockTime\> ]] ; then
	# BASH_REMATCH[1] contains the (first and in this
	# case only) parenthesis expression of the
	# last =~ operation
    blktim="${BASH_REMATCH[1]}"
    if [[ "${blktim}" -gt "0" ]] ; then
      echo 1>&2 "BlockTime=${blktim}, sleeping until unblocked"
      sleep $(( ${blktim} + 1 ))
			echo >&2 "You may now retry it."
			exit 2
    fi
  fi
  if [[ "$resp" =~ \<Challenge\>([0-9a-fA-F]+)\</Challenge\> ]] ; then
		# Got a login challenge
		# BASH_REMATCH[1] contains the (first and in this
		# case only) parenthesis expression of the
		# last =~ operation
    challenge="${BASH_REMATCH[1]}"
		# Calculate MD5 with whatever command we have
    if which >/dev/null 2>&1 md5 ; then
      MD5=$(echo -n "${challenge}-${pass}" | iconv --from-code=UTF-8 --to-code=UTF-16LE | md5 )
    elif which >/dev/null 2>&1 md5sum ; then
      MD5=$(echo -n "${challenge}-${pass}" | iconv --from-code=UTF-8 --to-code UTF-16LE | md5sum | cut -f1 -d ' ')
    else
      echo 1>&2 "Error: neither 'md5' nor 'md5sum' are installed"
      exit 1
    fi
		# Prepare response for challenge
    resp4challenge="${challenge}-${MD5}"
		# Send it, get server's response
		# this should return a session id
    resp=$(curl -s -G -d "response=${resp4challenge}" -d "username=${user}" "${baseurl}/login_sid.lua")
  fi
fi

if ! [[ "$resp" =~ \<SID\>(0+)\</SID\> ]] && [[ "$resp" =~ \<SID\>([0-9a-fA-F]+)\</SID\> ]] ; then
  # either SID was already non-zero authentication disabled) or login succeeded
	# BASH_REMATH[1] contains the (first and in this
	# case only) parenthesis expression of the
	# last =~ operation, in this case what matched
	# the (0+)
  sessionid="${BASH_REMATCH[1]}"
	if [ -r "${logofyear}" ]; then
		loylastline=$(tail -1 "$logofyear")
	fi
	# FIXME why does \t not work instead of .*
	sedpattern=$(echo "${loylastline}" | awk '{printf "^%s.*%s",$1,$2}')
	curl -s -d "xhr=1&lang=de&page=log&sid=${sessionid}" -H "Content-Type: application/x-www-form-urlencoded" "${baseurl}/data.lua" | jq -r '.data.log[] | .date + "\t" + .time + "\t" + .msg' | grep -v "${ignore}" | tac | filter "${sedpattern}"|sed -e 1d >> ${logofyear}
	# This is never reached in case of ERROR occuring in
	# above, because -e is set, so the following code
	# is NEVER executed, when an error occurs.
	# It just sits here to prohibit silent failures
	# in the case someone unsets -e (+e)
	if [ $? != 0 ];then
		echo "something command in the quite long pipeline went wrong" <&2
		echo "try again to run with \"bash -x $0\" to find out more" <&2
		exit 1
	fi
else
	# no session-id, no luck
	echo "Login as $user failed." >&2
fi
exit
# vim: set ts=2 sw=2 expandtab ft=bash:
