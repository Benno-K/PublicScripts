#!/usr/bin/env perl
use strict;
use warnings;
use File::Which;
use File::Find;
use Module::Metadata;
use version;
use Getopt::Long;
use Time::HiRes qw(time);

# ------------------------------------------------------------
# Script created by ChatGPT, designed by the author
# Purpose: Check Perl scripts in $PATH, detect missing modules,
#          suggest apt packages, and list CPAN-only modules.
#
# Features:
#   - Recursive dependency checking
#   - Version-aware using version->parse
#   - Verbose mode (-v) showing each module checked
#   - Statistics mode (-s #) showing processed modules every # items
#   - Outputs a single apt install line for missing Debian-packaged modules
#   - Writes CPAN-only missing modules to a file
#   - Optional CPAN output file name via -o
#   - Help info via -h or --help
#   - Summary report at end: scripts, top-level modules, recursive modules
#   - Hidden -X # option to stop after # modules (for testing)
#   - Tracks and reports total runtime
# ------------------------------------------------------------

my $verbose      = 0;
my $statEvery    = 0;
my $stopAfter    = 0;    # hidden -X
my $cpanFile     = "missing_from_cpan.txt";
my $help         = 0;

GetOptions(
    "v"        => \$verbose,
    "s=i"      => \$statEvery,
    "X=i"      => \$stopAfter,
    "o=s"      => \$cpanFile,
    "h|help"   => \$help,
) or die "Invalid options. Try --help\n";

if ($help) {
    print <<"USAGE";
Usage: $0 [options]

Options:
  -v              Verbose: show each module checked
  -s N            Show statistics every N modules
  -o FILE         Write CPAN-only missing modules to FILE (default: missing_from_cpan.txt)
  -h, --help      Show this help message
  -X N            (hidden) Stop after N modules (for testing)
USAGE
    exit;
}

my $startTime = time();

my %seenModules;
my %missingApt;
my %missingCpan;
my %scriptModules;

# --- Find all scripts in PATH that are Perl ---
my @scripts;
for my $dir (split /:/, $ENV{PATH}) {
    next unless -d $dir;
    find(
        sub {
            return unless -f $_ && -x _;
            open my $fh, "<", $_ or return;
            my $first = <$fh>;
            close $fh;
            if ($first && $first =~ m{^#!.*perl}) {
                push @scripts, $File::Find::name;
            }
        },
        $dir
    );
}

# --- Parse scripts for use/require ---
my @topModules;
for my $script (@scripts) {
    open my $fh, "<", $script or next;
    while (<$fh>) {
        if (/^\s*use\s+([\w:]+)/ || /^\s*require\s+([\w:]+)\s*;/) {
            push @topModules, $1;
            $scriptModules{$script}{$1} = 1;
        }
    }
    close $fh;
}

# --- Recursive module check ---
sub checkModule {
    my ($module) = @_;
    return if $seenModules{$module}++;
    print "Checking $module\n" if $verbose;

    my $meta = Module::Metadata->new_from_module($module);
    unless ($meta) {
        # Try to map to apt
        (my $pkg = lc($module)) =~ s{::}{-}g;
        $pkg = "lib$pkg-perl";
        if (system("apt-cache show $pkg > /dev/null 2>&1") == 0) {
            $missingApt{$pkg} = 1;
        } else {
            $missingCpan{$module} = 1;
        }
        return;
    }

    for my $used ($meta->packages_inside) {
        next if $used eq $module;
        checkModule($used);
    }

    if ($statEvery && (keys %seenModules) % $statEvery == 0) {
        printf "Processed %d modules in %.1f seconds\n",
            scalar(keys %seenModules), time() - $startTime;
    }

    if ($stopAfter && (keys %seenModules) >= $stopAfter) {
        die "Stopped after $stopAfter modules (testing mode)\n";
    }
}

for my $mod (@topModules) {
    checkModule($mod);
}

# --- Write CPAN-only modules ---
if (%missingCpan) {
    open my $fh, ">", $cpanFile or die "Cannot write $cpanFile: $!";
    print $fh "$_\n" for sort keys %missingCpan;
    close $fh;
    print "CPAN-only missing modules written to $cpanFile\n";
}

# --- Print apt install line ---
if (%missingApt) {
    my $cmd = "sudo apt install " . join(" ", sort keys %missingApt);
    print "APT-installable missing modules:\n  $cmd\n";
}

# --- Print summary ---
my $runtime = time() - $startTime;
print "\n===== Summary =====\n";
print "Total Perl scripts scanned (from PATH): " . scalar(@scripts) . "\n";
print "Total top-level modules referenced by scripts: " . scalar(@topModules) . "\n";
print "Total modules checked recursively: " . scalar(keys %seenModules) . "\n";
print "APT-installable missing modules: " . scalar(keys %missingApt) . "\n";
print "CPAN-only missing modules: " . scalar(keys %missingCpan) . "\n";
printf "Total runtime: %.1f seconds\n", $runtime;
print "===================\n";
