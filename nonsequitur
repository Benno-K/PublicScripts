#!/bin/bash

fetchImage () {
	local nsImgUrl=~pi/bin/nsimgurl
	local maxtries=${2:-10}
	local try=1
	local nsdate=${1:-$(date +%Y/%m/%d)}
	local nsfile=Non-Sequitur-${nsdate:0:4}-${nsdate:5:2}-${nsdate:8:2}
	local nsdir=~pi/nonsequitur/${nsdate:0:4}

	local page=$(wget -q -O - https://www.gocomics.com/nonsequitur/${nsdate})
	if [ "$page" = "" ]; then
		echo failed to fetch for ${nsdate} >&2
		exit 3
	fi
	local imgurl=$(echo $page|$nsImgUrl)
	while [ ${#imgurl} -gt 255 ]
	do
		imgurl=$(wget -q -O - https://www.gocomics.com/nonsequitur/${1}|$nsImgUrl)
		((try++))
		if [ $try -gt $maxtries ]; then exit 1;fi
		echo "try $try (of $maxtries) in $try secs" >&2
		sleep $try
	done
	conttype=$(wget -q -S $imgurl 2>&1|awk -F': ' '/Content-Type:/{print $2}')
	# conttype=${conttype/\\r/}
	typ=${conttype/\/*/}
	ext=${conttype/*\//}
	if [ "$typ" != "image" ]; then
		echo "got content of type \"$typ\" - no idea how to deal with that" >&2
		exit 2
	else
		ext=${ext/jpeg/jpg} # turn jpeg to jpg
		if [ "${ext}" = "gif" ]; then
			outfile=$nsdir/$nsfile.png
		else
			outfile=$nsdir/$nsfile.$ext
		fi
		if [ ! -s $outfile ]; then
			if [ "${ext}" = "gif" ]; then
				wget -q -O - $imgurl | convert - $outfile
			else
				wget -q -O $outfile $imgurl
			fi
		fi
	fi
	echo $outfile
}

mailtoday () {
	name="Non-Sequitur"
	fromaddr=nonsequitur@kardel.eu
	fromname="${name}-Mailer"
	from="\"$fromname\" <$fromaddr>"
	sendmail=/usr/sbin/sendmail
	to=kardel
	today=$(date +%Y/%m/%d)
	heute=$(date +%d.%m.%Y)
	url=https://www.gocomics.com/nonsequitur/

	# Construct URL
	page=${url}$(wget -q -O - $url | grep /nonsequitur/2025/|awk -F'"' '/comics/{print substr($8,14)}')
	$sendmail -f "$from" -r $fromaddr -t $to <<-EOI
	Subject: Non Sequitur $heute

	Find today's cartoon: ${page}
	EOI
}

fetchyears() {
	cy=$(date +%Y)
	y1=${1:-$cy}
	y2=${2:-$y1}

	if [ $y1 -gt $y2 ]; then
		for (( y=$y1 ; y>=$y2; y-- ))
		do
			fetchyear $y
		done
	else
		for (( y=$y1 ; y<=$y2; y++ ))
		do
			fetchyear $y
		done
	fi
}

fetchyear () {
	oneday=86400 # seconds
	first=$(date -d $1/01/01 +%s)
	last=$(date -d $1/12/31 +%s)
	for (( d=$first; d<=$last; d=d+$oneday ))
	do
		if [ $d -ge $earliest ] &&
			 [ $d -le $latest ]; then
			date -d @$d +%Y/%m/%d
			nonsequitur -M -o -maxtries 3 -d $(date -d @$d +%Y/%m/%d)
		fi
	done
}

name="Non-Sequitur"
refurl="http://www.gocomics.com/nonsequitur/"
dst=/home/pi/nonsequitur
fails=$dst/fails.log
nomail=0
precheck=1
maxtries=10
verbose=0
earliest=$(date -d 1992/02/16 +%s)
latest=$(date -d 00:00 +%s)
mailto="kardel"
#mailcc="kardel@freenet.de"
#mailcc="Benno.Kardel@web.de,Benno.Kardel@laposte.net"
mailcc=""
mailtohdr=$(echo $mailto | awk '{print $1}')
mailcchdr=$(echo $mailcc | awk '{print $1}')
if [ "$mailcc" != "" ]; then
	recips="$mailto,$mailcc"
else
	recips="$mailto"
fi
fromaddr=nonsequitur@kardel.eu
fromname="${name}-Mailer"
from="\"$fromname\" <$fromaddr>"
sendmail=/usr/sbin/sendmail
once=0
noelderchk=0
chkprevdays=40

myname=$(basename $0)
if [ x$myname = x$0 ]; then
  # Must be in path then
  self=$0
else
  # Get full path to this script, store in $self
  read -d/ begin rest <<<$0
  if [ x$begin = x ]; then # we were invoked fully-qualified
    self=$0
  else
    if [ x$begin = x. ]; then # We were invoked using ./<whatever>
      self=$PWD/$myname
    else
      # We were invoked partially qualified
      self=$PWD/$0
    fi
  fi
fi

function usage() {
  if [ "$1" != 0 ]; then
    outdsc=2
  else
    outdsc=1
  fi
  cat <<EOF >&$outdsc
Usage: $0 <options> [-d YYYY/MM/DD ]
-d            specify a specific date to download
-ff           fetch previously failed days
              (uses $fails)
-h            show this help
-o            same as -o but does not care about
              preceeding dates
-o            once a day (no download, if called
              repeatedly and file exists)
-O            once a day (like -o, but downloads
              missing preceeding dates also)
-maxtries #   how many tries if download fails 
-M            do not send mail
-rmf          remove fail logfile ($fails)
-sf           show fail dates
-y            fetch one or more complete years
               -y NNNN for a single year
               or
               -y NNNN NNNN for a range of years
               (e.g. "-y 2000 2003" or 
                "-y 2003 2000", depending on
                which wanted first) 
-v              show URL
EOF
  exit $1
}

args=$@ # Remember args for possible recursive calls
tries=1

thisyear=$(date +%Y)

while [ "${1:0:1}" = "-" ]
do
	case "$1" in
		-ff|-fetch-failed)
			[ ! -s $fails ] && exit
			for d in $(cat $fails)
			do
				echo $d
				$self -n -M -o -maxtries 3 -d $d
			done
			exit
			;;
		-h|-help|--help)
			usage 0
			exit 0
			;;
		-M)
    	nomail=1
			;;
		-n|-nofaillog)
			nofaillog=1
			;;
		-O)
    	once=1
			;;
		-o)
    	once=1
    	noelderchk=1
			;;
		-rmf|removefaillog)
			rm -fv $fails
			exit
			;;
		-try)
			shift
			tries=$1
			;;
		-maxtries)
			shift
			maxtries=$1
			;;
		-d)
			shift
			datepar=$1
			stamp=$(echo $1 | awk -F/ '{printf "%04d-%02d-%02d",$1,$2,$3}')
			thisyear=$(echo $1 | awk -F/ '{printf "%04d",$1}')
			headline=$(echo $1 | awk -F/ '{printf "Non Sequitur %02d.%02d.%04d",$3,$2,$1}')
			refurl="${refurl}$1"
  		;;
		-sf)
			if [ -s $fails ]; then
				# if more than 24 lines, then use less else cat
				if [ $(stat -c %s $fails) -gt 264 ]; then
					less $fails
				else
					cat $fails
				fi
			fi
			exit
			;;
		-y)
			fetchyears $2 $3
			exit
			;;
		-v)
    	verbose=1
			;;
		*)
    	echo "Unrecognized parameter or option: $1"
    	usage 1
    	exit 1
  		;;
		esac
  shift
done

# These three may have been defined using
# the -d option, so do only default them
# if undefined
datepar=${datepar:-$(date +"%Y/%m/%d")}
stamp=${datepar:0:4}-${datepar:5:2}-${datepar:8:2}
headline=${headline:-"Non Sequitur $(date +%d.%m.%Y)"}

if [ $once = 1 ] && [ $noelderchk = 0 ]; then
  for ((d = $chkprevdays; d > 0; d--)); do
    urlpostfix=$(date --date=today-${d}days +"%Y/%m/%d")
    $self -O -d $urlpostfix
  done
fi

[ ! -d $dst/$thisyear ] && mkdir $dst/$thisyear

name="${name}-${stamp}"
if [ "$precheck" = 1 ]; then
	if [ -s "$dst/$thisyear/$name.*" ];then
		exit
	fi
fi
if [ $once = 1 ]; then
	for ftyp in jpg png gif
	do
		if [ -s $dst/$thisyear/$name.$ftyp ]; then exit 0;fi
	done
fi

out=$(fetchImage "$datepar" $maxtries) || exit
if [ $verbose = 1 ];then echo datepar=$datepar;fi
if [ -r $out ] && [ "$1" != "-g" ]; then
	touch -d $stamp $out
	if [ "$nomail" != "1" ]; then
		text=$(
			cat <<-EOI
			Der aktuelle Non Sequitur Cartoon von Wiley Miller
			EOI
		)
		html=$(
			cat <<-EOI
			<html>
			 <body>
					<img alt="" src="cid:imgcid-$stamp">
			 </body>
			</html>
			EOI
		)
		# Construct the HTML part and store it in variable htmlpart
		htmlpart=$(echo "$html" | mime-construct --subpart --type "text/html; charset=utf-8" --encoding base64 --file - --output)
		textpart=$(echo "$text" | mime-construct --subpart --type "text/plain; charset=utf-8" --encoding base64 --file - --output)

		rlist=$(echo $recips|sed -e 's/,/ /g')
		for envto in $rlist
		do
		# Now construct - on the fly - the image part and pipe it into ...
			mime-construct \
				--subpart --type image/$filext \
				--file $out \
				--header "Content-ID: <imgcid-$stamp>" \
				--header "Content-Disposition: inline;" \
				--header " filename=\"Non-Sequitur-$stamp.$filext\"" \
				--output |
				# ... the multipart-command, thus creating the entire message and ...
				(if [ "$mailcc" != "" ]; then \
				mime-construct \
					--header "From: $from" \
					--header "To: $mailtohdr" \
					--header "Cc: $mailcchdr" \
					--subject "$headline" \
					--multipart multipart/related \
					--subpart-string "$textpart" \
					--subpart-file - \
					--subpart-string "$htmlpart" \
					--subpart-file - \
					--output;else \
				mime-construct \
					--header "From: $from" \
					--header "To: $mailtohdr" \
					--header "Cc: $mailcchdr" \
					--subject "$headline" \
					--multipart multipart/related \
					--subpart-string "$textpart" \
					--subpart-file - \
					--subpart-string "$htmlpart" \
					--subpart-file - \
					--output;fi) | \
				# ..finally pipe that into the sendmail command
				$sendmail -f "$from" -r $fromaddr -c $cc $envto
		done
	fi # if [ "$nomail" != "1" ]; then
else
	if [ "$nomail" != "1" ]; then
		cat <<-EOI | mailx -s "Wiley Miller's Non Sequitur of today failed!" $mailto
		Hello, this is $0

		I just downloaded $url 
		(retrieved using $refurl) into
		$out (on $(hostname)).
		I expected $out
		to be an image, but it turned out to be of type $filtyp.

		If you have any idea why, please fix me.

		Your sincerely
		$0

		PS: I deleted $out.

		EOI
	else 
		echo >&2 "download try $tries of $maxtries failed: for $datepar"
		if [ $tries -lt $maxtries ]; then
			sleep $((tries*3))
			$self $args -try $((++tries))
		else
			if [ "$nofaillog" != 1 ]; then echo $datepar >> $fails;fi
			rm $out
		fi
  fi
fi

exit
