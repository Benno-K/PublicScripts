#!/bin/bash

threshold=5
stateFile="$HOME/.$(basename "$0").state"
declare -A fsStates
declare -A fsDates
quiet=0
savedCmdLine=""
savedThreshold=""

showHelp() {
  cat <<EOF 1>&2
Usage: $(basename "$0") [options] fs1 [fs2 ...]
Options:
  -t N       Set threshold percentage (default: 5)
  -q         Quiet mode (minimal output)
  -h, --help Show this help and exit

Without arguments, runs with saved filesystems and threshold.
Example:
  $(basename "$0") -t 10 /home /var
  $(basename "$0") -q
EOF
  exit 0
}

humanReadable() {
  awk -v size="$1" '
    function hum(n) {
      split("B K M G T P", u)
      i = 1
      while (n >= 1024 && i < 6) {
        n /= 1024
        i++
      }
      return sprintf("%.1f%s", n, u[i])
    }
    BEGIN { print hum(size) }
  '
}

for arg in "$@"; do
  case "$arg" in
    -h|--help)
      showHelp
      ;;
  esac
done

while getopts "t:q" opt; do
  case $opt in
    t) threshold="$OPTARG" ;;
    q) quiet=1 ;;
    \?) echo "Bad option: -$OPTARG" >&2; exit 1 ;;
    :) echo "Option -$OPTARG needs arg." >&2; exit 1 ;;
  esac
done

shift $((OPTIND - 1))

getUsage() {
  statOut=$(stat -f --format="%a %b %S" "$1" 2>/dev/null)
  if [ $? -ne 0 ] || [ -z "$statOut" ]; then
    echo "ERROR"
    return 1
  fi
  set -- $statOut
  freeBlocks=$1
  totalBlocks=$2
  blockSize=$3

  usedBlocks=$((totalBlocks - freeBlocks))
  [ "$totalBlocks" -eq 0 ] && percent=0 || percent=$(( (usedBlocks * 100) / totalBlocks ))

  freeBytes=$((freeBlocks * blockSize))
  usedBytes=$((usedBlocks * blockSize))

  echo "$percent $freeBytes $usedBytes"
}

loadState() {
  if [ -f "$stateFile" ]; then
    while IFS='=' read -r key value; do
      case "$key" in
        "savedThreshold") savedThreshold="$value" ;;
        "savedCmdLine") savedCmdLine="$value" ;;
        initialPercent*)
          fsKey="${key#initialPercent}"
          fsStates["$fsKey"]="${value%%|*}"
          fsDates["$fsKey"]="${value#*|}"
          ;;
      esac
    done < "$stateFile"
  fi
}

saveState() {
  rm -f "$stateFile"
  printf "savedThreshold=%s\n" "$threshold" >> "$stateFile"
  printf "savedCmdLine=%s\n" "$savedCmdLine" >> "$stateFile"
  for fs in "$@"; do
    safeFs=$(echo "$fs" | sed 's/[^a-zA-Z0-9]/_/g')
    safeFs="FS${safeFs}"
    percent="${fsStates["$safeFs"]}"
    dt="${fsDates["$safeFs"]}"
    [ -n "$percent" ] && [ -n "$dt" ] && \
      printf "initialPercent%s=%s|%s\n" "$safeFs" "$percent" "$dt" >> "$stateFile"
  done
}

loadState

if [ $# -eq 0 ]; then
  if [ -n "$savedCmdLine" ]; then
    set -- $savedCmdLine
    [ -n "$savedThreshold" ] && threshold="$savedThreshold"
  else
    echo "Usage: $0 [-t threshold] [-q] fs1 fs2 ..." >&2
    exit 1
  fi
else
  savedCmdLine="$*"
fi

headlinePrinted=0
headlineStr="Disk usage as of $(date +'%d.%m.%y %H:%M')"

for fs in "$@"; do
  safeFs=$(echo "$fs" | sed 's/[^a-zA-Z0-9]/_/g')
  safeFs="FS${safeFs}"

  usage=$(getUsage "$fs")
  if [ "$usage" = "ERROR" ]; then
    echo "$fs: Could not stat filesystem or directory." >&2
    continue
  fi
  percent=$(echo "$usage" | awk '{print $1}')
  free=$(echo "$usage" | awk '{print $2}')
  used=$(echo "$usage" | awk '{print $3}')

  freeH=$(humanReadable "$free")
  usedH=$(humanReadable "$used")

  now=$(date +"%d.%m.%y:%H.%M")

  initialPercent="${fsStates["$safeFs"]:-$percent}"
  initialDate="${fsDates["$safeFs"]:-$now}"

  updateState=0

  # Only print headline if not in quiet mode and output is generated
  if [ $quiet -eq 0 ] && [ $headlinePrinted -eq 0 ]; then
    echo "$headlineStr"
    headlinePrinted=1
  fi

  if [ $quiet -eq 0 ]; then
    echo "$fs: $initialPercent -> $percent% free:$freeH used:$usedH"
    echo " since: $initialDate"
  fi

  diff=$((percent - initialPercent))
  absDiff=$((diff < 0 ? -diff : diff))

  if [ "$initialPercent" = "$percent" ]; then
    updateState=0
  elif ((absDiff > threshold)); then
    updateState=1
  fi

  if [ "$updateState" -eq 1 ]; then
    fsStates["$safeFs"]="$percent"
    fsDates["$safeFs"]="$now"
  fi
done

saveState "$@"
